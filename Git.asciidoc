## Local Repository Guide
 
Make a new folder and go to it:

<pre>
mkdir selenium
cd selenium
Create the directories, initialize the local git repo, and copy the code locally, create a branch:

    mkdir framework
    cd framework
    git init
    git clone https://bitbucket.etrade.com/scm/tsa/framework.git

To create a new branch, use git checkout -b:

    git checkout -b myBranch

To link a new branch to a remote repo, use git branch --set-upstream-to:

    git branch --set-upstream-to=origin/project/sprint-25-3-8to3-21 feature/INVPROD-2419 

To switch branches, use git checkout with no options:

    git checkout foo

To reset existing commits and create a new branch, stash your local env, switch to the master or current top-level branch:

    git push
    git stash 
    git checkout master
    git checkout -b newbranch
    git stash apply

To check in, use the following process:

 
Add new files:

    git add foo

Stash changed files:

    git stash

Pull new changes from the repo:

    git pull

List stashed changes:

    git stash list

Merge stashed changes:

    git stash apply

Commit pushed changes:

    git commit -m "foo bar baz"

Amend an unacceptable commit message:

    git commit --amend

Revert the last commit

    git revert HEAD 

Push new changes to the repo:

    git push

Diff current remote to an older branch:

    git diff FETCH_HEAD...feature/MAS-2782 --diff-filter=A

One file copy from one commit to the local branch:    
    
    git show [commit hash] -- /foo/bar/baz.js > /foo/bar/baz.js

Remove a file

    git rm -f ngtemplates.js

Reset the local branch HEAD to the remote branch HEAD
 
    git reset
    git checkout -b feature/INVPROD-4781
    git branch --set-upstream-to=origin/feature/INVPROD-4781 feature/INVPROD-4781
    git reset --hard FETCH_HEAD
 

## Cherry pick
Create branch called misc/foo

    git fetch # sync to remote
    git checkout misc/foo # change branches
    git cherry-pick 533c2093200 #merge; Run git status, resolve conflicts, Run git add, then commit and push

## Log Search

    git log --since 2017-08-06 --remotes='*' --author=Sweatte*

Interactive Patch of Selected Files or Commits
 
    git pull origin develop

    git checkout -b myDevIntgrMerge #new branch

    git checkout -p origin/dev-intgr -- src/main/webapp/WEB\-INF/views/site10/ #pick branch and subdirectories

Auto Conflict Resolution

    git checkout origin/dev-intgr --ours -- foo.bar

    git checkout origin/feature/baseline --ours -- ApplicationMockData.js

Auto reset and merge to rollback to a commit

    git pull origin baseline

    git reset HEAD 12345

    git checkout -b rebaseline

    git merge -s ours origin/feature/baseline

# Select the files and changes you want during each prompt

    Apply this hunk to index and worktree [y,n,q,a,d,/,e,?]?

Using the following key:

y - apply this hunk to index and worktree
n - do not apply this hunk to index and worktree
q - quit; do not apply this hunk or any of the remaining ones
a - apply this hunk and all later hunks in the file
d - do not apply this hunk or any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help

Then push to the remote using:

    git push --set-upstream origin myDevIntgrMerge #push merge

Merge without accepting any commits

    git merge origin/feature/INVPROD-2898-release -s recursive -X ours

 

Test for Bitbucket Conflicts Locally

You need to update your local master branch. So do the following steps :

    git checkout master
    git pull origin master

Resolve the conflicts here, then run:

    git add *
    git stash
    git checkout << your branch >>

To pull in your local changes, run git stash apply

    git merge master

Resolve the conflicts again
    
    git add *
    git commit
    git push
 
## Ours Merge Strategies

For starters, git merge -s ours xyz is not the same as git merge -X ours xyz. The first uses merge strategy called “ours”, and the second uses default ‘recursive’ merge strategy, but with “ours” option. Creating two entities named “ours” that do similar, but subtly different things is the epitome of  bad interface design.

The “-s” variant creates a commit that merges current branch and “xyz”, but ignores all changes from xyz, so the resulting content would be identical to the current branch. This is useful for getting rid of unwanted branches when force-pushes and deletes are disabled. The “-X” variant only ignores changes from xyz that cause a conflict. Changes from xyz that do not cause a conflict will be included in the end result.

## Revert Local Git Changes

To fix an invalid commit message(no iTrack, no whitespace, etc), do the following:

  git commit --amend
To clean mistaken deletes or checkins, do the following:

  git reset --hard HEAD

Then clean the untracked files and directories with:

  git clean -df
 

Store Password
Create a netrc file:

Linux: vi ~/.netrc
Windows: New-Item -Name _netrc -ItemType File -Path $env:userprofile
Set the permissions for your eyes only:

chmod 0600 ~/.netrc
Then add the bitbucket URL and your username and password:
    
machine bitbucket.etrade.com
login myusername 
password mypassword
    

## History

https://www.theregister.co.uk/2005/04/14/torvalds_attacks_tridgell/

https://www.aosabook.org/en/git.html

https://spderosso.github.io/onward13.pdf

https://news.slashdot.org/story/16/05/10/1840255/11-years-after-git-bitkeeper-is-open-sourced

## Migration

http://wiki.c2.com/?MercurialVersionControl

https://www.rath.org/why-you-should-give-mercurial-a-shot.html

https://www.tshooter.com.br/en/2016/03/07/eight-reasons-to-prefer-git-to-invs-tfvc/

https://lwn.net/Articles/574079/

https://tech.blog.aknin.name/2010/05/14/switching-to-mercurial-taming-zsh/

https://wilsonmar.github.io/tfs-vs-github/

https://blogs.microsoft.co.il/leonj/2017/06/05/avoid-excessive-database-growth-for-git-tfs-users/

https://thenewstack.io/microsoft-forged-scalable-git/

http://help.manuscript.com/7984/mercurial-branches-versus-kiln-branches

## References
https://www.linux.org/docs/man7/gitrevisions.html

http://people.irisa.fr/Anthony.Baire/git/git-advanced-handout.pdf

https://www.kernel.org/pub/software/scm/git/docs/git-checkout.html

https://www.python.org/dev/peps/pep-0103/

https://docs.moodle.org/dev/Git_for_developers

http://www.noah.org/wiki/Git_notes

https://www.wikihow.com/Use-Git-Effectively

https://www.sbf5.com/~cduan/technical/git/git-3.shtml

https://kofoedanders.com/git-cooperation-simplified/

http://joemaller.com/990/a-web-focused-git-workflow/

https://news.ycombinator.com/item?id=12785200

http://travisjeffery.com/b/2012/02/search-a-git-repo-like-a-ninja/

https://help.github.com/articles/changing-a-commit-message/

http://git-extensions-documentation.readthedocs.io/en/latest/modify_history.html

https://davidwalsh.name/git-default-remote

[Git User Manual](https://www.kernel.org/pub/software/scm/git/docs/user-manual.html)

https://www.cloudbees.com/blog/advanced-git-jenkins

https://community.atlassian.com/t5/Bitbucket-questions/behind-ahead-incorrect/qaq-p/4749

https://confluence.atlassian.com/bitbucketserver050/automatic-branch-merging-913474751.html

https://confluence.atlassian.com/bitbucketserverkb/how-to-define-a-default-merge-strategy-per-project-894207103.html

https://git-scm.com/book/en/v2/Git-Internals-Transfer-Protocols

https://blog.petrzemek.net/2016/07/10/git-patch-mode-all-the-way/

http://mindspill.net/computing/linux-notes/git-diff-tree-whitespace/

https://blog.bigballofwax.co.nz/2011/12/15/fixing-whitespace-when-apply-patches-with-git/

http://jyx.github.io/blog/2012/03/09/apply-patches-in-git/

https://makandracards.com/makandra/11541-how-to-not-leave-trailing-whitespace-using-your-editor-or-git

https://robots.thoughtbot.com/send-a-patch-to-someone-using-git-format-patch

http://gitster.livejournal.com/28309.html

https://davidwalsh.name/git-export-patch

http://nithinbekal.com/posts/git-patch/

http://git-extensions-documentation.readthedocs.io/en/latest/patches.html

https://kennyballou.com/blog/2015/10/art-manually-edit-hunks/

https://www.kernel.org/pub/software/scm/git/docs/git-apply.html

http://www.olitreadwell.com/2014/12/27/git-commit-interactivity/

https://git-scm.com/docs/diff-generate-patch

https://www.kernel.org/pub/software/scm/git/docs/git-rerere.html

https://www.codementor.io/citizen428/git-tutorial-10-common-git-problems-and-how-to-fix-them-aajv0katd

https://confluence.atlassian.com/bitbucketserverkb/pushing-to-bitbucket-server-reports-there-are-too-many-unreachable-loose-objects-825788622.html

http://legacy.python.org/dev/peps/pep-0103/

https://www.quora.com/In-a-git-merge-conflict-how-do-I-tell-git-that-for-files-X-Y-and-Z-I-want-it-to-screw-the-local-changes-and-simply-overwrite-with-the-version-being-pulled-in

http://genomewiki.ucsc.edu/index.php/Resolving_merge_conflicts_in_Git

https://git-scm.com/docs/merge-strategies

http://www.drdobbs.com/tools/three-way-merging-a-look-under-the-hood/240164902

http://blog.ezyang.com/2010/01/advanced-git-merge/

https://ariya.io/2013/09/fast-forward-git-merge

https://git-scm.com/docs/git-merge-file

http://blog.ezyang.com/2011/07/synthetic-git-merges/

http://www-cs-students.stanford.edu/~blynn/gitmagic/ch07.html

https://stackoverflow.com/questions/26157114/some-choices-in-interactive-mode-dont-work-on-git

https://wiki.freebsd.org/GitConversion

https://www.devroom.io/2010/06/10/cherry-picking-specific-commits-from-another-branch/

https://ninc.centreforbrainhealth.ca/sites/default/files/pictures/git.pdf

http://www.gelato.unsw.edu.au/archives/git/0512/13748.html

https://www.slideshare.net/wjmuse/git-35996727

https://www.slideshare.net/JosManuelVegaMonroy/git-session20122013-18929189

http://gitpython.readthedocs.io/en/stable/reference.html

https://dyerlab.ces.vcu.edu/2016/06/22/google-drive-git/

https://en.wikibooks.org/wiki/Git/Internal_structure

https://git-scm.com/book/en/v1/Git-and-Other-Systems-Git-and-Subversion

https://blog.ostermiller.org/git-remove-from-history

https://en.wikibooks.org/wiki/Commit_Often,_Perfect_Later,_Publish_Once:_Git_Best_Practices

https://sethrobertson.github.io/GitBestPractices/

http://blog.kablamo.org/2013/12/08/git-restore/

https://stackoverflow.com/questions/6531241/how-to-use-expect-and-git-clone?rq=1

https://git-scm.com/docs/git-config

http://web.mit.edu/jhawk/mnt/spo/git/www/git-config.html

https://www.atlassian.com/blog/git/extending-git

https://easyengine.io/tutorials/git/git-resolve-merge-conflicts/

https://git.wiki.kernel.org/index.php/Aliases

http://www.cirosantilli.com/git-tutorial/

https://git-scm.com/docs/revisions

https://github.com/bricoleurs/bricolage/wiki/Merging-with-Git

https://www.quora.com/In-a-git-merge-conflict-how-do-I-tell-git-that-for-files-X-Y-and-Z-I-want-it-to-screw-the-local-changes-and-simply-overwrite-with-the-version-being-pulled-in

http://gitolite.com/detached-head.html

http://www.it3.be/2014/05/07/git-head-detached/

https://www.alexmoreno.net/head-detached-originmaster

https://git-scm.com/docs/git-checkout#_detached_head

https://confluence.atlassian.com/bitbucketserver/using-smart-commits-in-bitbucket-server-802599018.html

https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/diff/%7Bspec%7D

https://confluence.atlassian.com/bitbucketserverkb/all-bitbucket-server-knowledge-base-articles-915145369.html

https://confluence.atlassian.com/bitbucketserverkb/understanding-diff-view-in-bitbucket-server-859450562.html

https://stackoverflow.com/questions/36727469/bitbucket-crlf-issue

https://mirrors.edge.kernel.org/pub/software/scm/git/docs/technical/api-index.html

https://libgit2.org/libgit2/

https://help.github.com/articles/error-permission-denied-publickey/

https://coderwall.com/p/ovjobq/git-merge-strategy-if-you-have-a-conflict

https://ikriv.com/blog/?p=2419

https://verboselogging.com/2010/06/25/copy-merge-with-git

https://blog.tankywoo.com/2014/05/20/git-merge-strategy-ours-and-theirs.html

https://www.reddit.com/r/programming/comments/kt058/gits_merge_recursive_strategy_explained/

https://git.seveas.net/the-meaning-of-refs-and-refspecs.html

https://medium.com/@Sergeon/using-javascript-in-your-git-hooks-f0ce09477334

https://aboullaite.me/deep-dive-into-git-git-refs/

http://gitolite.com/tips-3.html

https://help.github.com/articles/ignoring-files/

http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/

https://www.atlassian.com/git/tutorials/saving-changes/gitignore

https://stackoverflow.com/questions/7751555/how-to-resolve-git-stash-conflict-without-commit

https://stackoverflow.com/questions/16190387/when-applying-a-patch-is-there-any-way-to-resolve-conflicts

https://git-scm.com/book/en/v1/Git-Tools-Stashing

https://www.oliverdavies.uk/blog/git-format-patch/

https://git.kernel.org/pub/scm/git/git.git/plain/Documentation/SubmittingPatches?id=master

https://makandracards.com/makandra/2521-git-how-to-create-and-apply-patches

https://www.tutorialspoint.com/git/git_patch_operation.htm

https://www.lullabot.com/articles/git-best-practices-upgrading-the-patch-process

https://www.usna.edu/Users/cs/aviv/classes/si485h/s17/submit.html

https://cbx33.github.io/gitt/chap8-6.html

https://jaytaylor.com/notes/node/1475947476000.html

https://www.drupal.org/node/1129120

https://help.github.com/articles/ignoring-files/

https://git-scm.com/docs/gitignore